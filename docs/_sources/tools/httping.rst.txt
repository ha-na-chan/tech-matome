httping を使って HTTP の応答時間を記録してグラフ化する
################################################################

.. toctree::
   :maxdepth: 2

はじめに
================

.. image:: sample.png


HTTP の応答時間、すなわち `web サーバの遅延を測定` し、記録してグラフ化します。

ping（ICMP）だとサーバそのものの健全性は分かるのですが、HTTP サービスが生きているかはわかりません。そこで、`web サーバの遅延を測定` してくれる `httping(*1)` を利用し http の応答時間を尺度に web サーバーの健全性の測定を図るものです。

.. note::

    言うまでもないですが、サーバまでの通信経路に問題がある場合は、httping の値は大きくなります。LAN 内などでの測定がいいかもしれません。

.. warning::
	
    本ツールは任意のサーバの httping 値を記録することができます。が、ご自身のサーバに対してのみ実施してください。
	
    他のサーバにやりすぎると負荷がかかります（c.f. *岡崎市立中央図書館事件* ）。

インストール
===================

パッケージのインストール
---------------------------

必要なパッケージをインストールします。今回は ubuntu を用いているので次のようになります::

    sudo apt install httping
    sudo apt install rrdtool

インストールしたら、  `httping -c 1 <適当なwebサーバのアドレス>` を実行してみて httping が上手く行っているか試してみてください。

シェルスクリプトのダウンロード
-------------------------------------

https://github.com/ha-na-chan/server_tools/tree/master/httping

上記にある、 `httping.sh` と `initial.sh` を任意の *同じ* ディレクトリに保存します。大したことは書いていませんが、一応動きます。

シェルスクリプトの設定変更
---------------------------------

`httping.sh` の **９行目** でファイルの保存先を指定しています。ここに、保存したい任意のディレクトリの絶対パスを指定します。

::

    DIR="/home/USER/Documents"

たぶんですが、こういった監視（っぽい）ツールは cron 等で定期的に回すと思いますので、固定させておいたほうがいいかなあと思った感じです。

使ってみる
=================

基本的な使い方
-----------------------

下記のコマンドを実行します。

::

    sh httping.sh <www.exsample.com>
    # <> には好きなものを指定する。<>は消す。

RRDtool でグラフを書くには、元データを格納する RRD ファイルが必要になります。このスクリプトでは、それが存在するかを最初に確認し、ない場合は作る動作をしています（その際に `initial.sh` が必要）。

すると、指定したディレクトリに３つの画像ファイルが作成されています。それぞれ

* 最近24時間のデータ
* 最近3日分のデータ
* 最近14日分のデータ

をグラフ化しています。この区切りにしたのは趣味です。

おそらく、最初に実行してもグラフには何も書かれていません。データが足りないためです。そこで、cron 等に登録して一晩くらい寝かせてみます。

cron への登録
------------------------

やり方は自由ですが、 `crontab -e` が debian だと使えると思います(\*2)。詳しい使い方は cronとかでぐぐってみてください。

::

    */5 * * * *   sh <httping.sh までの絶対パスを指定> <www.exsample.com>
    # 5分毎に実行
    # ドメイン名を忘れずに
    
これで準備は完了です。大体半日くらい放置していると、グラフが描画されていると思います。できていないときは、RRD ファイルが存在しているか（ない場合は手動で1回実施してみる）、httping が手動でやってもうまく行っているか確認してください。

カスタマイズと説明（おまけ）
====================================

`こいつの作ったシェルスクリプトは微妙だ！` と思われるかもしれません。ぜひプルリクエストをいただきたいのですが、微修正を手元で行うことも可能です。

httping とオプション
--------------------------

httping については、\*1 の参考リンクに使い方が掲載されています。

ping の回数指定
~~~~~~~~~~~~~~~~~~~~

::
    
    -c N
    # "ping"（httping） の回数を指定する

なお、スクリプト内では1回にしているので意味はありませんが、複数回行ったときはその最も小さい値をデータに格納しています。


ユーザーエージェントの偽装（？）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

普通、web ページを閲覧するとユーザーエージェントの値がアクセスログに記録されます。すると、管理側には `この人は chrome を使っているんだな` とざっくり分かる感じになっています。

このツールをラズパイで動かすと、この値がラズパイになって、ログを見ていると精神衛生上よろしくないので（笑）、あたかも `macbook からアクセスされているように見せかけ` ました。

基本的にはいらない設定だと思うんですが、こんなこともできるんだーという例です。

::
    
    -I "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) Appl..."
    # ユーザーエージェントの値を指定の文字列にする
    
RRDtool
-----------------

今回は、RRDtool の

* crate
* update
* graph

を利用しています。これらは奥が深すぎて、ここでの説明は荷が重いので省略します。ただ、graph はカスタマイズのしがいがあるかもしれません。

\*3 には graph の参考リンクを載せています。例えばオプションとして

::

    [-t|--title string]

ではタイトルを指定することができます。

::

    [-w|--width pixels] [-h|--height pixels]
    
では大きさをピクセル単位で指定できます。

::

    [-c|--color COLORTAG#rrggbb[aa]]
    
では、色を指定することができます。指定できるもの（COLORTAG）は

* BACK (background)
* ANVAS (for the background of the actual graph)
* FONT (for the color of the font)

などがあります。


参考
=================

* \*1: https://linux.die.net/man/1/httping
* \*2: https://manpages.debian.org/testing/manpages-ja/crontab.1.ja.html
* \*3: https://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html
